// import "../fonts/MiSans-Bold.otf";
// import "../fonts/MiSans-Demibold.otf";
// import "../fonts/MiSans-ExtraLight.otf";
// import "../fonts/MiSans-Heavy.otf";
// import "../fonts/MiSans-Light.otf";
// import "../fonts/MiSans-Medium.otf";
// import "../fonts/MiSans-Normal.otf";
// import "../fonts/MiSans-Regular.otf";
// import "../fonts/MiSans-Semibold.otf";
// import "../fonts/MiSans-Thin.otf";

import { CustomWindow } from "./window/custom-window.slint";
import { OpenFrpAPIWatermark } from "./window/openfrp-api-watermark.slint";
import { ListView , Slider, Button, TextEdit} from "std-widgets.slint";
import { HomePage } from "./pages/home-page.slint";
import { SettingsPage } from "./pages/settings-page.slint";
import { TunnelPage } from "./pages/tunnel-page.slint";
import { ConsolePage } from "./pages/console-page.slint";
import { Translator,TranslatorData } from "../lang/translator.slint";
import { Lang } from "../lang/lang.slint";
import { CustomDialog } from "widgets/dialog.slint";
import { CustomLineEdit } from "widgets/line-edit.slint";
import { CustomButton } from "widgets/button.slint";
import { NoProgressLoading } from "widgets/load.slint";


export { SettingsPage }

export global User {
    in-out property <bool> logged_in;
    in-out property <string> name;
    in-out property <image> avatar:self.default-avatar;
    in-out property <bool> logging_in;
    in-out property <bool> login_failed;
    out property <image> default-avatar:@image-url("../res/icons/sidebar/user.svg");
    callback rfd-load-img();
    callback login(string,string);
}

component SideBarItem inherits Rectangle {
    in-out property <bool> active;
    callback activate();
    out property <bool> has-hover;
    has-hover <=> touch.has-hover;

    fs:=FocusScope {

    }

    VerticalLayout {
        alignment: center;
        @children
    }

    touch:=TouchArea {
        clicked => { fs.focus();root.activate(); }
    }
}

export component LoginDialog inherits Rectangle{
    property <string> title:lang-trans.login;
    property <Translator> lang_trans:Lang.translator;
    // in-out property <bool> show:true;
    in-out property <bool> show;
    in-out property <bool> dark;
    in-out property <brush> title-color:#010101;
    in-out property <brush> dialog-bg:#efefef;
    in-out property <brush> dialog-border-color:#7777773f;
    in-out property <brush> context-bg:#fefefe;
    in-out property <brush> mask-color:show?(dark?#0707077f:#3333337f):transparent;
    callback open();
    open => {
        email-input.value="";
        password-input.value="";
        show = !show;
    }
    // opacity: show?1:0;
    Rectangle {
        touch:=TouchArea {
            width: show?parent.width:0;
            height: show?parent.height:0;
        }
        forward-focus: fs1;
        fs1:=FocusScope {
            visible: show;
        }
        border-radius: 4px;
        background: mask-color;
        sub_dialog:=CustomDialog {
            TouchArea {
                mouse-cursor: default;
                clicked => {
                    fs.focus();
                }
            }
            fs:=FocusScope {
                width: 0;
                height: 0;
            }
            dark <=> root.dark;
            close => {
                root.show = false;
            }
            VerticalLayout {
                x:0;
                y:0;
                padding: 10px;
                spacing: 8px;
                alignment: center;
                email:=HorizontalLayout {
                    height: self.min-height;
                    alignment: space-between;
                    email_label:=Text {
                        width: self.min-width;
                        color: sub-dialog.title-color;
                        text: lang-trans.email;
                        font-size: 14px;
                    }
                    email_input:=CustomLineEdit {
                        y:0;
                        width: min(parent.width - password-label.width,parent.width - email_label.width);
                        height: email_label.min-height;
                        placeholder: lang-trans.email-placeholder;
                        font-size: 12px;
                        text-color: sub-dialog.title-color;
                    }
                }
                password:=HorizontalLayout {
                    height: self.min-height;
                    alignment: space-between;
                    password_label:=Text {
                        width: self.min-width;
                        color: sub-dialog.title-color;
                        text: lang-trans.password;
                        font-size: 14px;
                    }
                    password_input:=CustomLineEdit {
                        y:0;
                        width: min(parent.width - password-label.width,parent.width - email_label.width);
                        height: password-label.min-height;
                        placeholder: lang-trans.password-placeholder;
                        font-size: 12px;
                        input-type: InputType.password;
                        text-color: sub-dialog.title-color;
                    }
                }
                bottom:=HorizontalLayout{
                    alignment: space-between;
                    spacing: 5px;
                    tips:=Rectangle{
                        HorizontalLayout{
                            alignment: start;
                            spacing: 4px;
                            opacity: User.logging_in?1:0;
                            text:=Text {
                                text: lang_trans.logging-in;
                                color: sub-dialog.title-color;
                                font-size: 14px;
                            }
                            load:=NoProgressLoading {
                                y:parent.height/2 - self.height/2;
                                opened: User.logging_in;
                                height: 16px;
                                width: 16px;
                                duration: 400ms;
                                TouchArea {
                                    // clicked => {
                                    //     User.logging_in = !User.logging_in;
                                    // }
                                }
                            }
                            animate opacity {
                                duration: 100ms;
                                easing: ease-in-out;
                            }
                        }
                    }
                    submit:=CustomButton {
                        y:parent.height/2 - self.height/2;
                        width: 80px;
                        dark: root.dark;
                        text: lang-trans.login;
                        height: 24px;
                        bg: dark?#0060c0df:#0060c0cf;
                        text-color: #fefefe;
                        br-color: dark?#0060c07f:#0060c03f;
                        clicked => {
                            if(email_input.value != "" && password_input.value != ""){
                                User.login(email_input.value,password_input.value);
                            }
                        }
                    }
                }
            }
            title: root.title;
            // width: min(250px,parent.width);
            // height: min(225px,parent.height);
            width: show?250px:0px;
            height: show?225px:0px;
            // clip: true;
            opacity: show?1:0;
            animate width,height,opacity {
                duration: 100ms;
                easing: cubic-bezier(0.5, 0.0, 0.5, 1);
            }
            drop-shadow-blur: 4px;
            drop-shadow-offset-x: 2px;
            drop-shadow-offset-y: 2px;
            drop-shadow-color: #777777.transparentize(0.4);
        }
    }
}

export component MainPage inherits CustomWindow {
    property <bool> dark;
    property <string> version <=> TranslatorData.version;
    title-color: dark?#fefefedf:#fefefecf;
    property <brush> page-header-color:dark?@linear-gradient(135deg,#eeeaffdf,#ffceeaef):@linear-gradient(135deg,#0058cfdf,#ef0028ef).darker(250%);
    property <brush> sbar-i-color-sel:dark?@linear-gradient(135deg,#40b8ffef,#ff4068ef):@linear-gradient(135deg,#0078ef,#ef0028);
    property <brush> sbar-i-color-unsel:dark?@linear-gradient(135deg,#d7eaff5f,#ffd7ee5f):@linear-gradient(135deg,#1b3b6baf,#381828af);
    border-color: dark?@linear-gradient(135deg,#1f1f1ffe,#202020ef):@linear-gradient(135deg,#0078effe,#0078efcf).darker(5%);
    min-width: 400px;
    property <int> active_page: 0;
    property <Translator> lang_trans:Lang.translator;
    in-out property <string> username: User.logged-in?User.name:lang-trans.default-username;
    in-out property <image> user_avatar: User.logged-in?User.avatar:@image-url("../res/icons/sidebar/user.svg");
    // default-font-family: "MiSans";

    title: lang_trans.title;
    content-background: dark?#1f1f1f:#fefefe;
    border-radius: 4px;
    preferred-width: 480px;
    preferred-height: 350px;
    callback close_win();
    callback move_win(length,length);
    callback get_win_pos() -> {x:length,y:length};
    callback dbug(float);
    animate border-color,title-color {
        duration: 75ms;
        easing: cubic-bezier(0, 0.0, 0.75, 1);
    }

    debug(x) => {
        dbug(x);
    }

    init => {
        self.width = self.preferred-width;
        self.height = self.preferred-height;
        self.version = "a0.0.195";
    }

    update-pos => {
        root.position = get-win-pos();
    }

    close => {
        close_win();
    }

    move(offset_x,offset_y) => {
        move_win(offset_x,offset_y);
        root.update-pos();
    }
    ld:=LoginDialog {
        z:99;
        dark <=> root.dark;
        // x:0px;
        // y:0px;
        width: self.show?100%:100%;
        height: self.show?100%:100%;
        animate mask-color {
            duration: 75ms;
            easing: cubic-bezier(0, 0.0, 0.75, 1);
        }
    }

    VerticalLayout {
        alignment: end;
        HorizontalLayout {
            alignment: end;
            OpenFrpAPIWatermark {
                text-color: dark?#fefefe7f:#0101017f;
                animate text-color {
                    duration: 75ms;
                    easing: cubic-bezier(0, 0.0, 0.75, 1);
                }
            }
        }
    }

    HorizontalLayout {
        sidebar:= Rectangle {
            property <bool> minimized: false;
            property <length> minimized-width: 18px+16px+16px;
            background: dark?#ffffff07:#0000000f;
            property <length> padding-y: 20px;
            width: minimized?minimized-width:128px;
            animate width {
                duration: 200ms;
                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
            }
            VerticalLayout {
                alignment: space-between;
                padding-top: padding-y;
                padding-bottom: padding-y;
                property <[{text:string,icon:image,reverse:bool,function:string,no-colorize-icon:bool,page:int}]> items: [
                    {
                        text: lang_trans.menu,
                        icon: @image-url("../res/icons/sidebar/menu.svg"),
                        function: "menu",
                        page:-1,
                    },
                    {
                        text: username,
                        icon: user_avatar,
                        no-colorize-icon: User.logged_in,
                        function: "user",
                        page:-1,
                    },
                    {
                        text:lang-trans.home,
                        icon:@image-url("../res/icons/sidebar/home.svg"),
                        page:0,
                    },
                    {
                        text:lang-trans.tunnel,
                        icon:@image-url("../res/icons/sidebar/tunnel.svg"),
                        page:1,
                    },
                    {
                        text:lang-trans.console,
                        icon:@image-url("../res/icons/sidebar/console.svg"),
                        page:2,
                    },
                    {
                        text:lang-trans.settings,
                        icon:@image-url("../res/icons/sidebar/settings.svg"),
                        reverse:true,
                        page:3,
                    },
                ];
                height: parent.height;
                top:=VerticalLayout{
                    x:0;
                    for items[index] in items:VerticalLayout{
                        // padding-top: !items.reverse?4px:0px;
                        padding-bottom: !items.reverse?4px:0px;
                        if !items.reverse:SideBarItem{
                            x:0;
                            property <bool> is_user_item:items.function=="user";
                            activate => {
                                if(items.function==""){
                                    root.active_page = items.page;
                                }else if(items.function=="menu"){
                                    minimized=!minimized;
                                }else if(items.function=="user"){
                                    ld.open();
                                }
                            }
                            background: self.has-hover?(
                                    self.actived?
                                    (
                                        root.dark?
                                        (
                                            #ffffff12
                                        ):(
                                            #00000026
                                        )
                                    ):(
                                        root.dark?
                                        (
                                            #ffffff03
                                        ):(
                                            #00000007
                                        )
                                    )
                                )
                                :
                                (
                                    self.actived?
                                    (
                                        root.dark?
                                        (
                                            #ffffff0f
                                        ):(
                                            #0000001f
                                        )
                                    ):(
                                        transparent
                                    )
                                );
                            border-radius: root.border-radius;
                            height: self.min-height;
                            width: minimized?minimized-width:128px;
                            property <bool> actived: root.active_page == items.page;
                            animate width,background {
                                duration: 200ms;
                                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                            }
                            HorizontalLayout {
                                padding: 12px;
                                padding-left: is_user_item?16px - 4px:16px;
                                padding-right: 16px;
                                spacing: 16px;
                                alignment: space-between;
                                Image {
                                    height: is_user_item?18px + 8px:18px;
                                    width: self.height;
                                    source: items.icon;
                                    image-fit: contain;
                                    colorize: items.no-colorize-icon?#0000:actived?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                    animate colorize {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                    Image {
                                        opacity: 0.4;
                                        x:(actived)?0.50px:0.30px;
                                        y:(actived)?0.50px:0.30px;
                                        height: parent.height;
                                        width: self.height;
                                        source: items.icon;
                                        image-fit: contain;
                                        colorize: items.no-colorize-icon?#0000:actived?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                        animate x,y,colorize {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                    Image {
                                        opacity: 0.4;
                                        x:(actived)?-0.50px:-0.30px;
                                        y:(actived)?-0.50px:-0.30px;
                                        height: parent.height;
                                        width: self.height;
                                        source: items.icon;
                                        image-fit: contain;
                                        colorize: items.no-colorize-icon?#0000:actived?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                        animate x,y,colorize {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                }
                                Text {
                                    height: self.min-height;
                                    width: self.min-width;
                                    text: items.text;
                                    vertical-alignment: center;
                                    color: actived?sbar-i-color-sel: sbar-i-color-unsel;
                                    opacity: minimized?0:1;
                                    font-size: 12px;
                                    font-weight: 500;
                                    animate opacity,color {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                    Text {
                                        height: self.min-height;
                                        width: self.min-width;
                                        text: items.text;
                                        vertical-alignment: center;
                                        opacity: 0.4;
                                        font-size: 12px;
                                        font-weight: 500;
                                        x:(actived)?0.50px:0.10px;
                                        y:(actived)?0.50px:0.10px;
                                        color: actived?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                        animate x,y,color {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                    Text {
                                        height: self.min-height;
                                        width: self.min-width;
                                        text: items.text;
                                        vertical-alignment: center;
                                        opacity: 0.4;
                                        font-size: 12px;
                                        font-weight: 500;
                                        x:(actived)?-0.50px:-0.10px;
                                        y:(actived)?-0.50px:-0.10px;
                                        color: actived?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                        animate x,y,color {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                bottom:=VerticalLayout{
                    x:0;
                    alignment: end;
                    for items[index] in items:VerticalLayout{
                        padding-bottom: items.reverse?4px:0px;
                        // padding-top: items.reverse?4px:0px;
                        if items.reverse:SideBarItem{
                            x:0;
                            activate => {
                                root.active_page = items.page;
                            }
                            background: self.has-hover?(
                                self.actived?
                                (
                                    root.dark?
                                    (
                                        #ffffff12
                                    ):(
                                        #00000026
                                    )
                                ):(
                                    root.dark?
                                    (
                                        #ffffff03
                                    ):(
                                        #00000007
                                    )
                                )
                            )
                            :
                            (
                                self.actived?
                                (
                                    root.dark?
                                    (
                                        #ffffff0f
                                    ):(
                                        #0000001f
                                    )
                                ):(
                                    transparent
                                )
                            );
                            border-radius: root.border-radius;
                            height: self.min-height;
                            width: minimized?minimized-width:128px;
                            property <bool> actived: root.active_page == items.page;
                            animate width,background {
                                duration: 200ms;
                                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                            }
                            HorizontalLayout {
                                padding: 12px;
                                padding-left: 16px;
                                padding-right: 16px;
                                spacing: 16px;
                                alignment: space-between;
                                Image {
                                    height: 18px;
                                    width: self.height;
                                    source: items.icon;
                                    image-fit: contain;
                                    colorize: items.no-colorize-icon?#0000:actived?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                    animate colorize {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                    Image {
                                        opacity: 0.4;
                                        x:(actived)?0.50px:0.30px;
                                        y:(actived)?0.50px:0.30px;
                                        height: parent.height;
                                        width: self.height;
                                        source: items.icon;
                                        image-fit: contain;
                                        colorize: items.no-colorize-icon?#0000:actived?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                        animate x,y,colorize {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                    Image {
                                        opacity: 0.4;
                                        x:(actived)?-0.50px:-0.30px;
                                        y:(actived)?-0.50px:-0.30px;
                                        height: parent.height;
                                        width: self.height;
                                        source: items.icon;
                                        image-fit: contain;
                                        colorize: items.no-colorize-icon?#0000:actived?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                        animate x,y,colorize {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                }
                                Text {
                                    height: self.min-height;
                                    width: self.min-width;
                                    text: items.text;
                                    vertical-alignment: center;
                                    color: actived?sbar-i-color-sel: sbar-i-color-unsel;
                                    opacity: minimized?0:1;
                                    font-size: 12px;
                                    font-weight: 500;
                                    animate opacity,color {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                    Text {
                                        height: self.min-height;
                                        width: self.min-width;
                                        text: items.text;
                                        vertical-alignment: center;
                                        opacity: 0.4;
                                        font-size: 12px;
                                        font-weight: 500;
                                        x:(actived)?0.90px:0.10px;
                                        y:(actived)?0.90px:0.10px;
                                        color: actived?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                        animate x,y,color {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                    Text {
                                        height: self.min-height;
                                        width: self.min-width;
                                        text: items.text;
                                        vertical-alignment: center;
                                        opacity: 0.4;
                                        font-size: 12px;
                                        font-weight: 500;
                                        x:(actived)?-0.45px:-0.05px;
                                        y:(actived)?-0.45px:-0.05px;
                                        color: actived?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                        animate x,y,color {
                                            duration: 200ms;
                                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        main-view:= Rectangle{
            border-radius: 4px;
            // clip: true;
            HomePage {
                logged-in<=>User.logged-in;
                username<=>User.name;
                rfd-load-img => {
                    User.rfd-load-img();
                }
                property <bool> actived: root.active-page==0;
                property <bool> actived_in_up: root.active_page<0;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 250ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 125ms;
                    duration: 1.5ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
            TunnelPage {
                property <bool> actived: root.active-page==1;
                property <bool> actived_in_up: root.active_page<1;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 250ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 125ms;
                    duration: 1.5ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
            ConsolePage {
                property <bool> actived: root.active-page==2;
                property <bool> actived_in_up: root.active_page<2;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 250ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 125ms;
                    duration: 1.5ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
            SettingsPage {
                property <bool> actived: root.active-page==3;
                property <bool> actived_in_up: root.active_page<3;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                win-opacity <=> root.win-opacity;
                dark <=> root.dark;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 250ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 125ms;
                    duration: 1.5ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
        }
    }
}