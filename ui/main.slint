// import "../fonts/MiSans-Bold.otf";
// import "../fonts/MiSans-Demibold.otf";
// import "../fonts/MiSans-ExtraLight.otf";
// import "../fonts/MiSans-Heavy.otf";
// import "../fonts/MiSans-Light.otf";
// import "../fonts/MiSans-Medium.otf";
// import "../fonts/MiSans-Normal.otf";
// import "../fonts/MiSans-Regular.otf";
// import "../fonts/MiSans-Semibold.otf";
// import "../fonts/MiSans-Thin.otf";

import { CustomWindow } from "./window/custom-window.slint";
import { OpenFrpAPIWatermark } from "./window/openfrp-api-watermark.slint";
import { ListView , Slider, Button, TextEdit} from "std-widgets.slint";
import { HomePage } from "./pages/home-page.slint";
import { SettingsPage } from "./pages/settings-page.slint";
import { TunnelPage } from "./pages/tunnel-page.slint";
import { ConsolePage } from "./pages/console-page.slint";
import { zh-cn } from "../lang/zh_CN.slint";
import { Translator } from "../lang/translator.slint";
import { en } from "../lang/en.slint";
import { CustomDialog } from "widgets/dialog.slint";
import { CustomLineEdit } from "widgets/line-edit.slint";
import { CustomButton } from "widgets/button.slint";


export { SettingsPage }

export global User {
    in-out property <bool> logged_in;
    in-out property <string> name;
    in-out property <image> avatar:@image-url("../res/icon.png");
    in-out property <bool> logging_in;
    callback rfd-load-img();
    callback login(string,string);
}

component SideBarItem inherits Rectangle {
    in-out property <bool> active;
    callback activate();
    out property <bool> has-hover;
    has-hover <=> touch.has-hover;

    fs:=FocusScope {

    }

    VerticalLayout {
        alignment: center;
        @children
    }

    touch:=TouchArea {
        clicked => { fs.focus();root.activate(); }
    }
}

export component LoginDialog inherits Rectangle{
    property <string> title:lang-trans.login;
    in-out property <int> lang;
    zh_cn:=zh_cn {
    }
    en:=en {
    }
    property <Translator> lang_trans:[zh-cn.lang,en.lang][lang];
    // in-out property <bool> show:true;
    in-out property <bool> show;
    in-out property <bool> dark;
    in-out property <brush> title-color:#010101;
    in-out property <brush> dialog-bg:#efefef;
    in-out property <brush> dialog-border-color:#7777773f;
    in-out property <brush> context-bg:#fefefe;
    in-out property <brush> mask-color:show?#3333337f:#33333300;
    callback open();
    open => {
        email-input.value="";
        password-input.value="";
        show = !show;
    }
    // opacity: show?1:0;
    Rectangle {
        touch:=TouchArea {
            width: show?parent.width:0;
            height: show?parent.height:0;
        }
        border-radius: 4px;
        background: mask-color;
        sub_dialog:=CustomDialog {
            TouchArea {
                mouse-cursor: default;
                clicked => {
                    fs.focus();
                }
            }
            fs:=FocusScope {
                width: 0;
                height: 0;
            }
            dark <=> root.dark;
            close => {
                root.show = false;
            }
            VerticalLayout {
                x:0;
                y:0;
                padding: 10px;
                spacing: 8px;
                alignment: center;
                email:=HorizontalLayout {
                    height: self.min-height;
                    alignment: space-between;
                    email_label:=Text {
                        width: self.min-width;
                        color: sub-dialog.title-color;
                        text: lang-trans.email;
                        font-size: 14px;
                    }
                    email_input:=CustomLineEdit {
                        y:0;
                        width: min(parent.width - password-label.width,parent.width - email_label.width);
                        height: email_label.min-height;
                        placeholder: lang-trans.email-placeholder;
                        font-size: 12px;
                        text-color: sub-dialog.title-color;
                    }
                }
                password:=HorizontalLayout {
                    height: self.min-height;
                    alignment: space-between;
                    password_label:=Text {
                        width: self.min-width;
                        color: sub-dialog.title-color;
                        text: lang-trans.password;
                        font-size: 14px;
                    }
                    password_input:=CustomLineEdit {
                        y:0;
                        width: min(parent.width - password-label.width,parent.width - email_label.width);
                        height: password-label.min-height;
                        placeholder: lang-trans.password-placeholder;
                        font-size: 12px;
                        input-type: InputType.password;
                        text-color: sub-dialog.title-color;
                    }
                }
                bottom:=HorizontalLayout{
                    alignment: end;
                    submit:=CustomButton {
                        width: 80px;
                        dark: root.dark;
                        text: lang-trans.login;
                        height: 24px;
                        bg: dark?#1575d5df:#0060c0df;
                        text-color: #fefefe;
                        br-color: dark?#1575d53f:#0060c03f;
                        clicked => {
                            if(email_input.value != "" && password_input.value != ""){
                                User.login(email_input.value,password_input.value);
                            }
                        }
                    }
                }
            }
            title: root.title;
            // width: min(250px,parent.width);
            // height: min(225px,parent.height);
            width: show?250px:0px;
            height: show?225px:0px;
            // clip: true;
            opacity: show?1:0;
            animate width,height,opacity {
                duration: 100ms;
                easing: cubic-bezier(0.5, 0.0, 0.5, 1);
            }
            drop-shadow-blur: 2px;
            drop-shadow-offset-x: 0px;
            drop-shadow-offset-y: 0px;
            drop-shadow-color: self.title-color.transparentize(0.8);
        }
    }
}

export component MainPage inherits CustomWindow {
    property <bool> dark;
    property <string> version: "a0.0.190";
    property <int> lang: 0;
    title-color: dark?#fefefedf:#fefefecf;
    property <brush> page-header-color:dark?@linear-gradient(135deg,#eeeaffdf,#ffceeaef):@linear-gradient(135deg,#0058cfdf,#ef0028ef).darker(250%);
    property <brush> sbar-i-color-sel:dark?@linear-gradient(135deg,#40b8ffef,#ff4068ef):@linear-gradient(135deg,#0078ef,#ef0028);
    property <brush> sbar-i-color-unsel:dark?@linear-gradient(135deg,#d7eaff5f,#ffd7ee5f):@linear-gradient(135deg,#1b3b6baf,#381828af);
    border-color: dark?@linear-gradient(135deg,#1a2633,#331a1e):@linear-gradient(135deg,#0078effe,#0078efcf).darker(5%);
    min-height: 350px;
    min-width: 400px;
    property <int> active_page: 0;
    zh_cn:=zh_cn {
        version: version;
    }
    en:=en {
        version: version;
    }
    property <Translator> lang_trans:[zh-cn.lang,en.lang][lang];
    in-out property <string> username: User.logged-in?User.name:lang-trans.default-username;
    in-out property <image> user_avatar: User.logged-in?User.avatar:@image-url("../res/icons/sidebar/user.svg");
    // default-font-family: "MiSans";

    title: lang_trans.title;
    content-background: dark?#1f1f1f:#fefefe;
    border-radius: 4px;
    preferred-width: 480px;
    preferred-height: 350px;
    callback close_win();
    callback move_win(length,length);
    callback get_win_pos() -> {x:length,y:length};
    callback dbug(length);
    animate border-color,title-color {
        duration: 75ms;
        easing: cubic-bezier(0, 0.0, 0.75, 1);
    }

    debug(x) => {
        dbug(x);
    }

    init => {
        self.width = self.preferred-width;
        self.height = self.preferred-height;
    }

    update-pos => {
        root.position = get-win-pos();
    }

    close => {
        close_win();
    }

    move(offset_x,offset_y) => {
        move_win(offset_x,offset_y);
        root.update-pos();
    }
    ld:=LoginDialog {
        z:99;
        dark <=> root.dark;
        lang <=> root.lang;
        // x:0px;
        // y:0px;
        width: self.show?100%:100%;
        height: self.show?100%:100%;
        animate mask-color {
            duration: 75ms;
            easing: cubic-bezier(0, 0.0, 0.75, 1);
        }
    }

    VerticalLayout {
        alignment: end;
        HorizontalLayout {
            alignment: end;
            OpenFrpAPIWatermark {
                text-color: dark?#fefefe7f:#0101017f;
                animate text-color {
                    duration: 75ms;
                    easing: cubic-bezier(0, 0.0, 0.75, 1);
                }
            }
        }
    }

    HorizontalLayout {
        sidebar:= Rectangle {
            property <bool> minimized: false;
            property <length> minimized-width: 48px;
            background: dark?#ffffff03:#0000000f;
            property <length> padding-y: 16px;
            width: minimized?minimized-width:128px;
            animate width {
                duration: 200ms;
                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
            }
            no-backward:=VerticalLayout {
                padding-top: padding-y + self.spacing;
                padding-bottom: padding-y + self.spacing;
                spacing: 4px;
                alignment: start;
                height: parent.height;
                for items[index] in [
                    {
                        text:lang-trans.menu,
                        icon:@image-url("../res/icons/sidebar/menu.svg"),
                        func: "menu",
                    },
                    {
                        text:username,
                        icon:user-avatar,
                        no-colorize:User.logged-in,
                        func: "user",
                        // img-rendering:User.logged-in?ImageRendering.pixelated:ImageRendering.smooth,
                    },
                    {
                        text:lang-trans.home,
                        icon:@image-url("../res/icons/sidebar/home.svg"),
                    },
                    {
                        text:lang-trans.tunnel,
                        icon:@image-url("../res/icons/sidebar/tunnel.svg"),
                    },
                    {
                        text:lang-trans.console,
                        icon:@image-url("../res/icons/sidebar/console.svg"),
                    },
                ]: SideBarItem {
                    property <int> page: index - 2;
                    property <bool> actived: active_page == page;
                    activate => {
                        if(items.func == "menu"){
                            minimized=!minimized;
                        }else if(items.func == "user"){
                            ld.open();
                        }else{
                            root.active-page = page;
                        }
                    }
                    x:0;
                    width: minimized?minimized-width:128px;
                    height: self.min-height;
                    border-radius: root.border-radius;
                    background: root.dark?(self.has-hover?#ffffff03:transparent):(self.has-hover?#00000007:transparent);
                    animate width,background {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                    Rectangle {
                        width: parent.width;
                        background: root.dark?(actived?#ffffff0f:transparent):(actived?#0000001f:transparent);
                        border-radius: root.border-radius;
                        property <bool> is_avatar: items.func == "user";
                        layout1:=HorizontalLayout {
                            padding: 12px;
                            padding-left: is_avatar?16px - 4px:16px;
                            padding-right: 16px;
                            spacing: 16px;
                            alignment: space-between;
                            icon1:=Image {
                                height: is_avatar?title1.min-height + 8px:title1.min-height;
                                width: is_avatar?title1.min-height + 8px:title1.min-height;
                                source: items.icon;
                                image-fit: contain;
                                image-rendering: smooth;
                                colorize: items.no-colorize?#0000:(actived)?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                animate colorize {
                                    duration: 200ms;
                                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                }
                                icon_sd1:=Image {
                                    opacity: 0.4;
                                    image-fit: contain;
                                    x:(actived)?0.80px:0.50px;
                                    y:(actived)?0.80px:0.50px;
                                    height: is_avatar?title1.min-height + 8px:title1.min-height;
                                    width: is_avatar?title1.min-height + 8px:title1.min-height;
                                    image-rendering: smooth;
                                    source: items.icon;
                                    colorize: items.no-colorize?#0000:(actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,colorize {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                                icon_sd2:=Image {
                                    opacity: 0.4;
                                    image-fit: contain;
                                    x:(actived)?-0.60px:-0.50px;
                                    y:(actived)?-0.60px:-0.50px;
                                    height: is_avatar?title1.min-height + 8px:title1.min-height;
                                    width: is_avatar?title1.min-height + 8px:title1.min-height;
                                    image-rendering: smooth;
                                    source: items.icon;
                                    colorize: items.no-colorize?#0000:(actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,colorize {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                            }
                            title1:=Text {
                                height: icon1.height+parent.padding-top+parent.padding-bottom;
                                vertical-alignment: center;
                                opacity: minimized?0:1;
                                font-weight: 500;
                                text: items.text;
                                font-size: 12px;
                                color: (actived)?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                animate opacity,color {
                                    duration: 200ms;
                                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                }
                                Text {
                                    height: icon1.height+parent.padding-top+parent.padding-bottom;
                                    vertical-alignment: center;
                                    x:(actived)?0.90px:0.10px;
                                    y:(actived)?0.90px:0.10px;
                                    opacity: 0.4;
                                    font-weight: 500;
                                    text: items.text;
                                    font-size: 12px;
                                    color: (actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,color {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                                Text {
                                    height: icon1.height+parent.padding-top+parent.padding-bottom;
                                    vertical-alignment: center;
                                    x:(actived)?-0.45px:-0.05px;
                                    y:(actived)?-0.45px:-0.05px;
                                    opacity: 0.4;
                                    font-weight: 500;
                                    text: items.text;
                                    font-size: 12px;
                                    color: (actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,color {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                            }
                        }
                        init => {
                            minimized-width = icon1.width+layout1.padding-left+layout1.padding-right;
                        }
                        animate background {
                            duration: 200ms;
                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                        }
                    }
                }
            }
            backward:=VerticalLayout{
                alignment: end;
                padding-top: padding-y + self.spacing;
                padding-bottom: padding-y + self.spacing;
                spacing: 4px;
                height: parent.height;
                for items[index] in [
                    {
                        text:lang-trans.settings,
                        icon:@image-url("../res/icons/sidebar/settings.svg"),
                        func:"settings",
                        no-colorize:false,
                    },
                ]: SideBarItem {
                    property <int> page:index + 3;
                    property <bool> actived: active_page == page;
                    activate => {
                        root.active-page = page;
                    }
                    x:0;
                    width: minimized?minimized-width:128px;
                    height: self.min-height;
                    border-radius: root.border-radius;
                    background: root.dark?(self.has-hover?#ffffff03:transparent):(self.has-hover?#00000007:transparent);
                    animate width,background {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                    Rectangle {
                        width: parent.width;
                        background: root.dark?(actived?#ffffff0f:transparent):(actived?#0000001f:transparent);
                        border-radius: root.border-radius;
                        layout:=HorizontalLayout {
                            padding: 12px;
                            padding-left: 16px;
                            padding-right: 16px;
                            spacing: 16px;
                            alignment: space-between;
                            icon:=Image {
                                property <bool> is_avatar: items.func == "user";
                                height: is_avatar?title.min-height + 5px:title.min-height;
                                width: is_avatar?title.min-height + 5px:title.min-height;
                                source: items.icon;
                                image-fit: contain;
                                colorize: items.no-colorize?#0000:(actived)?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                animate colorize {
                                    duration: 200ms;
                                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                }
                                icon_sd:=Image {
                                    opacity: 0.4;
                                    image-fit: contain;
                                    x:(actived)?0.80px:0.50px;
                                    y:(actived)?0.80px:0.50px;
                                    height: is_avatar?title.min-height + 8px:title.min-height;
                                    width: is_avatar?title.min-height + 8px:title.min-height;
                                    image-rendering: smooth;
                                    source: items.icon;
                                    colorize: items.no-colorize?#0000:(actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,colorize {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                                icon_sd3:=Image {
                                    opacity: 0.4;
                                    image-fit: contain;
                                    x:(actived)?-0.60px:-0.50px;
                                    y:(actived)?-0.60px:-0.50px;
                                    height: is_avatar?title.min-height + 8px:title.min-height;
                                    width: is_avatar?title.min-height + 8px:title.min-height;
                                    image-rendering: smooth;
                                    source: items.icon;
                                    colorize: items.no-colorize?#0000:(actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,colorize {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                            }
                            title:=Text {
                                height: icon.height+parent.padding-top+parent.padding-bottom;
                                vertical-alignment: center;
                                opacity: minimized?0:1;
                                font-weight: 500;
                                text: items.text;
                                font-size: 12px;
                                color: (actived)?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                                animate opacity,color {
                                    duration: 200ms;
                                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                }
                                Text {
                                    height: icon.height+parent.padding-top+parent.padding-bottom;
                                    vertical-alignment: center;
                                    x:(actived)?0.90px:0.10px;
                                    y:(actived)?0.90px:0.10px;
                                    opacity: 0.4;
                                    font-weight: 500;
                                    text: items.text;
                                    font-size: 12px;
                                    color: (actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,color {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                                Text {
                                    height: icon.height+parent.padding-top+parent.padding-bottom;
                                    vertical-alignment: center;
                                    x:(actived)?-0.45px:-0.05px;
                                    y:(actived)?-0.45px:-0.05px;
                                    opacity: 0.4;
                                    font-weight: 500;
                                    text: items.text;
                                    font-size: 12px;
                                    color: (actived)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                    animate x,y,color {
                                        duration: 200ms;
                                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                    }
                                }
                            }
                        }
                        init => {
                            minimized-width = icon.width+layout.padding-left+layout.padding-right;
                        }
                        animate background {
                            duration: 200ms;
                            easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                        }
                    }
                }
            }
        }
        main-view:= Rectangle{
            border-radius: 4px;
            // clip: true;
            HomePage {
                lang<=>lang;
                logged-in<=>User.logged-in;
                username<=>User.name;
                rfd-load-img => {
                    User.rfd-load-img();
                }
                property <bool> actived: root.active-page==0;
                property <bool> actived_in_up: root.active_page<0;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 200ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 100ms;
                    duration: 1ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
            TunnelPage {
                lang <=> lang;
                property <bool> actived: root.active-page==1;
                property <bool> actived_in_up: root.active_page<1;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 200ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 100ms;
                    duration: 1ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
            ConsolePage {
                lang<=>lang;
                property <bool> actived: root.active-page==2;
                property <bool> actived_in_up: root.active_page<2;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 200ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 100ms;
                    duration: 1ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
            SettingsPage {
                lang <=> lang;
                property <bool> actived: root.active-page==3;
                property <bool> actived_in_up: root.active_page<3;
                x:0px;
                y:actived?0px:- root.height;
                width: 100%;
                height: 100%;
                header-color: page-header-color;
                win-opacity <=> root.win-opacity;
                dark <=> root.dark;
                opacity: actived?1:0;
                animate opacity {
                    // delay: actived?200ms:0ms;
                    duration: 200ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                animate x,y {
                    delay: 100ms;
                    duration: 1ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                // animate width,height {
                //     delay: 200ms;
                //     duration: 0ms;
                //     easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                // }
            }
        }
    }
}