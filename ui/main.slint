// import "../fonts/MiSans-Bold.otf";
// import "../fonts/MiSans-Demibold.otf";
// import "../fonts/MiSans-ExtraLight.otf";
// import "../fonts/MiSans-Heavy.otf";
// import "../fonts/MiSans-Light.otf";
// import "../fonts/MiSans-Medium.otf";
// import "../fonts/MiSans-Normal.otf";
// import "../fonts/MiSans-Regular.otf";
// import "../fonts/MiSans-Semibold.otf";
// import "../fonts/MiSans-Thin.otf";

import { CustomWindow } from "./window/custom-window.slint";
import { OpenFrpAPIWatermark } from "./window/openfrp-api-watermark.slint";
import { ListView , Slider} from "std-widgets.slint";
import { HomePage } from "./pages/home-page.slint";
import { SettingsPage } from "./pages/settings-page.slint";
import { TunnelPage } from "./pages/tunnel-page.slint";
import { ConsolePage } from "./pages/console-page.slint";

component SideBarItem inherits Rectangle {
    in-out property <bool> active;
    callback activate();
    out property <bool> has-hover;
    has-hover <=> touch.has-hover;

    GridLayout {
        @children
    }

    touch:=TouchArea {
        clicked => { root.activate(); }
    }
}

export component MainPage inherits CustomWindow {
    property <bool> dark;
    title-color: dark?#fefefedf:#fefefecf;
    property <brush> page-header-color:dark?@linear-gradient(135deg,#bae7ffdf,#ffaab7ef):@linear-gradient(135deg,#0058cfdf,#ef0028ef).darker(250%);
    property <brush> sbar-i-color-sel:dark?@linear-gradient(135deg,#40b8ffef,#ff4068ef):@linear-gradient(135deg,#0078ef,#ef0028);
    property <brush> sbar-i-color-unsel:dark?@linear-gradient(135deg,#d7eaff5f,#ffd7ee5f):@linear-gradient(135deg,#1b3b6baf,#381828af);
    border-color: dark?@linear-gradient(135deg,#0078ef,#ef0028).darker(300%):@linear-gradient(135deg,#0078efef,#0078ef7f).darker(5%);
    min-height: 350px;
    min-width: 350px;
    property <int> active_page: 0;
    // default-font-family: "MiSans";
    title: "OpenFrp Launcher a0.0.167";
    content-background: dark?#1f1f1f:#fefefe;
    // icon: @image-url("../res/icons/sidebar/icon.png");
    border-radius: 4px;
    preferred-width: 480px;
    preferred-height: 320px;
    callback close_win();
    callback move_win(length,length);
    callback get_win_pos() -> {x:length,y:length};
    callback dbug(length);
    animate border-color,title-color {
        duration: 75ms;
        easing: cubic-bezier(0, 0.0, 0.75, 1);
    }

    debug(x) => {
        dbug(x);
    }

    init => {
        self.width = self.preferred-width;
        self.height = self.preferred-height;
    }

    update-pos => {
        root.position = get-win-pos();
    }

    close => {
        close_win();
    }

    move(offset_x,offset_y) => {
        move_win(offset_x,offset_y);
        root.update-pos();
    }

    VerticalLayout {
        alignment: end;
        HorizontalLayout {
            alignment: end;
            OpenFrpAPIWatermark {
                text-color: dark?#fefefe7f:#0101017f;
                animate text-color {
                    duration: 75ms;
                    easing: cubic-bezier(0, 0.0, 0.75, 1);
                }
            }
        }
    }

    HorizontalLayout {
        sidebar:= Rectangle {
            property <bool> minimized: false;
            property <length> minimized-width: 48px;
            background: dark?#ffffff03:#0000000f;
            property <length> padding-y: 16px;
            width: minimized?minimized-width:128px;
            // clip: true;
            animate width {
                duration: 200ms;
                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
            }
            // background: black;
            function item-y(index:int,backward:bool) -> length{
                if(backward){
                    return self.height - padding-y - (index + 1) * 45px;
                }else{
                    return padding-y + index * 45px;
                }
            }
            
            for items[index] in [
                {
                    text:"菜单",
                    backward:false,
                    index:0,
                    icon:@image-url("../res/icons/sidebar/menu.svg"),
                    func: "menu",
                },
                {
                    text:"首页",
                    backward:false,
                    index:1,
                    icon:@image-url("../res/icons/sidebar/home.svg"),
                },
                {
                    text:"隧道",
                    backward:false,
                    index:2,
                    icon:@image-url("../res/icons/sidebar/tunnel.svg"),
                },
                {
                    text:"控制台",
                    backward:false,
                    index:3,
                    icon:@image-url("../res/icons/sidebar/console.svg"),
                },
                {
                    text:"设置",
                    backward:true,
                    index:0,
                    icon:@image-url("../res/icons/sidebar/settings.svg"),
                },
            ]: SideBarItem {
                property <int> page:index - 1;
                activate => {
                    if(items.func == "menu"){
                        minimized=!minimized;
                    }else{
                        root.active-page = page;
                    }
                }
                x:0;
                y: items.backward?item-y(items.index,true):item-y(items.index,false);
                width: minimized?minimized-width:128px;
                height: self.min-height;
                border-radius: root.border-radius;
                background: root.dark?(self.has-hover?#ffffff03:transparent):(self.has-hover?#00000007:transparent);
                animate width,background {
                    duration: 200ms;
                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                }
                Rectangle {
                    width: parent.width;
                    background: root.dark?(root.active-page==page?#ffffff0f:transparent):(root.active-page==page?#0000001f:transparent);
                    border-radius: root.border-radius;
                    layout:=HorizontalLayout {
                        padding: 12px;
                        padding-left: 16px;
                        padding-right: 16px;
                        spacing: 16px;
                        alignment: space-between;
                        icon:=Image {
                            // height: title.min-height;
                            width: title.min-height;
                            source: items.icon;
                            image-fit: contain;
                            colorize: (root.active-page==page)?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                            animate colorize {
                                duration: 200ms;
                                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                            }
                            Image {
                                opacity: 0.4;
                                x:(root.active-page==page)?0.90px:0.00px;
                                y:(root.active-page==page)?0.90px:0.00px;
                                height: title.min-height;
                                width: title.min-height;
                                source: items.icon;
                                colorize: (root.active-page==page)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                animate x,y,colorize {
                                    duration: 200ms;
                                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                }
                            }
                        }
                        title:=Text {
                            opacity: minimized?0:1;
                            font-weight: 500;
                            text: items.text;
                            font-size: 12px;
                            color: (root.active-page==page)?root.sbar-i-color-sel:root.sbar-i-color-unsel;
                            animate opacity,color {
                                duration: 200ms;
                                easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                            }
                            Text {
                                x:(root.active-page==page)?0.90px:0.00px;
                                y:(root.active-page==page)?0.90px:0.00px;
                                opacity: 0.4;
                                font-weight: 500;
                                text: items.text;
                                font-size: 12px;
                                color: (root.active-page==page)?root.sbar-i-color-sel.darker(5%):root.sbar-i-color-unsel.darker(5%);
                                animate x,y,color {
                                    duration: 200ms;
                                    easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                                }
                            }
                        }
                    }
                    init => {
                        minimized-width = icon.width+layout.padding-left+layout.padding-right;
                    }
                    animate background {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                }
            }
        }
        main-view:= Rectangle{
            Rectangle {
                clip: true;
                HomePage {
                    property <bool> actived: root.active-page==0;
                    x:actived?0px:50%*(parent.width - self.min-width);
                    y:actived?0px:50%*(parent.height - self.min-height);
                    width: actived?parent.width:0;
                    height: actived?parent.height:0;
                    header-color: page-header-color;
                    opacity: actived?1:0;
                    animate x,y,width,height,opacity {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                }
                TunnelPage {
                    property <bool> actived: root.active-page==1;
                    x:actived?0px:50%*(parent.width - self.min-width);
                    y:actived?0px:50%*(parent.height - self.min-height);
                    width: actived?parent.width:0;
                    height: actived?parent.height:0;
                    header-color: page-header-color;
                    opacity: actived?1:0;
                    animate x,y,width,height,opacity {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                }
                ConsolePage {
                    property <bool> actived: root.active-page==2;
                    x:actived?0px:50%*(parent.width - self.min-width);
                    y:actived?0px:50%*(parent.height - self.min-height);
                    width: actived?parent.width:0;
                    height: actived?parent.height:0;
                    header-color: page-header-color;
                    opacity: actived?1:0;
                    animate x,y,width,height,opacity {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                }
                SettingsPage {
                    property <bool> actived: root.active-page==3;
                    x:actived?0px:50%*(parent.width - self.min-width);
                    y:actived?0px:50%*(parent.height - self.min-height);
                    width: actived?parent.width:0;
                    height: actived?parent.height:0;
                    header-color: page-header-color;
                    win-opacity <=> root.win-opacity;
                    dark <=> root.dark;
                    opacity: actived?1:0;
                    animate x,y,width,height,opacity {
                        duration: 200ms;
                        easing: cubic-bezier(0.75, 0.0, 0.25, 1);
                    }
                }
            }
        }
    }
    

    
}